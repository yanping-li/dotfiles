#!/usr/bin/env bash

# Usage: ta <name-pattern>
# Match existing tmux session names with name-pattern:
# 1. If there is one match, attach to it.
# 2. If there is more than one match, print session names.
# 3. Create new session if no match.
function ta() {
    local match=0
    local pattern=$1
    local matched_name=""

    # while loop is executed in subshell, any changes to the variable will not be available once the subshell exits.
    # Using process substitution to prevent subshell.
    while read line
    do
        name=$(echo "$line" | sed -e 's/:.*$//')
        echo "$name" | grep -q -i "$pattern"
        if [ $? -eq 0 ]
        then
            echo "$name"
            matched_name=$name
            let match=$match+1
        fi
    done <<< "$(tmux ls)"       # process substitution

    if [ $match -gt 1 ]
    then
        return
    fi

    if [ $match -eq 1 ]
    then
        tmux attach -t "$matched_name"
    else
        tmux new -s "$pattern"
    fi

    return
}


# Usage example:
#   cdpr                Get PR-number from current tmux session name, and then change directory to this PR.
#   cdpr 1234567        Change directory to PR1234567.
# In both cases, if PR directory does not exist, create it and go to PR directory
function cdpr() {
    local PR=""
    local first_attempt="" 
    local second_attempt="" 
    local third_attempt=""
    local dir_exist=0
    local dir_name=""

    if [[ $# -gt 1 ]] ; then
        echo "Usage: cdpr [pr-number]"
        return
    fi

    PR=$1
    if [[ $# == 0 ]] ; then
        PR=$(tmux list-sessions | grep "(attached)" | grep -oh "^[0-9]*")
    fi

    # make sure it's a PR number
    echo "$PR" | grep -q '[^0-9]'
    if [ $? -eq 0 ]
    then
        echo "is \"$PR\" a PR number?"
        return 0
    fi
 
    first_attempt="/homes/lexli/prs/$PR" 
    second_attempt="/homes/lexli/d070/$PR" 
    third_attempt="/homes/lexli/d076/PR/$PR"
    dir_exist=0
    dir_name=$first_attempt

    # check if PR exists in first PR dir
    if [ -e $first_attempt ]
    then
        if [ -d $first_attempt ]
        then
            # echo "$first_attempt exist"
            dir_exist=1
            dir_name=$first_attempt
        fi
    fi

    # check if PR exists in second PR dir
    if [ -e $second_attempt ]
    then
        if [ -d $second_attempt ]
        then
            # echo "$second_attempt exist"
            dir_exist=1
            dir_name=$second_attempt
        fi
    fi

    # check if PR exists in third PR dir
    if [ -e $third_attempt ]
    then
        if [ -d $thrid_attempt ]
        then
            # echo "$third_attempt exist"
            dir_exist=1
            dir_name=$third_attempt
        fi
    fi

    # create dir if not exist, need confirmation first
    if [ $dir_exist -ne 1 ]
    then
        read -p "PR$PR directory does not exist, want to create it? [y/n]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            echo "$ mkdir -p $dir_name"
            mkdir -p $dir_name
        else
            echo "Quit without touching anything"
            return
        fi
    fi

    # goto dir
    echo "$ cd $dir_name"
    cd $dir_name
    echo "$ pwd"
    pwd

    return
}


# Usage example: cdsb X44D50
# Go to sandbox of specified release
function cdsb() {
    local version=""
    local major=""
    local minor=""
    local norm_version=""
    local sbdir=""

    if [[ $# -ne 1 ]] ; then
        echo "Usage: cdsb <release>"
        return
    fi

    version=$1

    #
    # normalize version
    #
#    echo "$version" | grep -q -i "X"
#    if [[ $? -ne 0 ]]
#    then
#        echo 'missing "X", wrong version?'
#        return
#    fi
#
#    echo "$version" | grep -q -i "D"
#    if [[ $? -ne 0 ]]
#    then
#        echo 'missing "D", wrong version?'
#        return
#    fi

    
    # e.g. X48-D55
    echo "$version" | grep -q -i "X"
    if [[ $? -eq 0 ]]
    then
        echo "$version" | grep -q -i "D"
        if [[ $? -ne 0 ]]
        then
            echo 'missing "D", wrong version?'
            return
        fi

        major=$(echo "$version" | sed -e 's/.*\([Xx][0-9]*\).*/\1/')
        major=$(echo "$major" | sed -e 's/x/X/')
        minor=$(echo "$version" | sed -e 's/.*\([Dd][0-9]*.*\)/\1/')
        minor=$(echo "$minor" | sed -e 's/d/D/')
        #echo "major = $major"
        #echo "minor = $minor"

        case $major in
        "X44"|"X45"|"X46"|"X47")
            junos_major="12.1"
            ;;

        "X48")
            junos_major="12.3"
            ;;

        "X49")
            junos_major="15.1"
            ;;
        *)
            echo "unknown version: $version"
            return
        esac

        norm_version=$junos_major$major"-"$minor
        # echo "version = $version"
        # echo "norm version = $norm_version"

        # go to sandbox
        sbdir="/volume/build/junos/"$junos_major"/service/"$norm_version
    fi

    echo "$ cd $sbdir"
    cd "$sbdir"
    echo "$ pwd"
    pwd
}

function __start_ssh_local_forwarding_if_neccessary() {
    pod=$1
    local_port=$2
    pod_ip="$(ssh lexli@qn-baas-lb.juniper.net '/volume/baas_devops/bin/baas lspod' 2>&1 | grep 'edit' | awk '{ print $4, $2 }' | grep $pod | grep -v 'grep')"
    ip="$(echo $pod_ip | awk '{ print $2 }')"

    # check if local forwarding exists already
    ps aux | grep 'ssh' | grep " $local_port:$ip" | grep 'qnc-baas-sshjmp' | grep -q -v 'grep'
    ret=$?

    if [ "$ret" -eq 1 ]; then
        # start local port forwarding, and ignore error message
        echo "Start ssh local port forwarding"
        ssh -f -N -L $local_port:$ip:22 qnc-baas-sshjmp.juniper.net 2> /dev/null
    fi
}

# Usage example: goto d070
# Usage example: goto ubm
# Usage example: goto ce-srx3400-1
# Login to remote server/dut
function goto() {
    local name=$1
    local app='ssh'
    local user_at_server=''
    local match=0
    local is_d
    local is_ubm
    local is_dut
    local is_mac

    if [[ $# -ne 1 ]] ; then
        echo "Usage: goto <server-name/dut-name>"
        return
    fi

    # is d070?
    echo "$name" | grep -q 'd[0-9]'
    if [ $? -eq 0 ]
    then
        match=1
        user_at_server='lexli@svl-junos-'$name'.juniper.net'
    fi
 
    # is qnc?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'qnc'
        if [ $? -eq 0 ]
        then
            match=1
            user_at_server='lexli@qn-baas-lb.juniper.net'
            app='ssh'
        fi
    fi
 
    # is pr?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'pr'
        if [ $? -eq 0 ]
        then
            match=1
            __start_ssh_local_forwarding_if_neccessary 'pr' 10010
            # '-A' to enable agent forwarding
            user_at_server='-A localhost -p 10010'
            app='ssh'
        fi
    fi

    # is etc?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'etc'
        if [ $? -eq 0 ]
        then
            match=1
            __start_ssh_local_forwarding_if_neccessary 'etc' 10020
            # '-A' to enable agent forwarding
            user_at_server='-A localhost -p 10020'
            app='ssh'
        fi
    fi

    # is build?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'build'
        if [ $? -eq 0 ]
        then
            match=1
            __start_ssh_local_forwarding_if_neccessary 'build' 10030
            # '-A' to enable agent forwarding
            user_at_server='-A localhost -p 10030'
            app='ssh'
        fi
    fi

    # is ubm?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'ubm'
        if [ $? -eq 0 ]
        then
            match=1
            user_at_server='lexli@contrail-ubm-lexli.ccp.juniper.net'
            app='ssh'
        fi
    fi

    # is mbp?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'mbp'
        if [ $? -eq 0 ]
        then
            match=1
            user_at_server='lexli@lexli-mbp.jnpr.net'
        fi
    fi

    # is dut?
    if [ $match -eq 0 ]
    then
        echo "$name" | grep -q 'ce-'
        if [ $? -eq 0 ]
        then
            match=1
            user_at_server='root@'$name'.spglab.juniper.net'
        fi
    fi

    # do ssh
    if [ $match -eq 0 ]
    then
        echo 'Is "'$name'" a good server name'
    else
        # ssh to server
        echo "$app $user_at_server"
        $app $user_at_server
    fi

    return
}

# list frequently used DUTs/Servers
function lsdut() {
    cat ~/.servers_and_devices
}

# list frequently used DUTs/Servers
function lsuserpassdir() {
    cat ~/.user_pass_and_jtac_servers_and_jtac_dirs
}
function lsjtac() {
    cat ~/.user_pass_and_jtac_servers_and_jtac_dirs
}

# list frequently used directories in sandbox
function lsdir() {

    alldirs="EXECUTABLES:
-------------
kernel RE 5K                    obj-i386/bsd/kernels/JUNIPER/kernel
kernel RE 5K(X48 and onwards)   obj-i386/junos/bsd/kernels/JUNIPER/kernel
kernel RE 1K3K                  obj-powerpc/bsd/kernels/JUNIPER-SRX/kernel
kernel RE branch                obj-octeon/junos/bsd/kernels/JSRXNLE/kernel
kernel xlp                      obj-xlp64/junos/bsd/kernels/SPU_XLP64/kernel
kernel xlr                      obj-xlr/junos/bsd/kernels/SPU_XLR/kernel/kernel
kernel old-xlr                  obj-xlr/bsd/kernels/SPU_XLR/kernel/kernel

flowd xlr 10.2                  obj-pfe/pfe/obj-flowd-xlr/flowd_xlr
flowd xlr                       obj-xlr-static/pfe/obj-flowd-xlr/flowd-xlr
flowd xlr-64                    obj-xlr64-static/pfe/obj-flowd-spu/flowd-xlr64
flowd xlp-64                    obj-xlp64-static/pfe/obj-flowd-spu/flowd-xlp64
flowd cpd                       obj-xlr-static/pfe/obj-cpd-xlr/cpd-master-xlr/cpd_master_xlr
                                obj-xlr-static/pfe/obj-cpd-xlr/cpd-slave-xlr/cpd_slave_xlr
flowd branch                    obj-pfe/pfe/obj-flowd-octeon-srx/flowd_octeon_hm
                                obj-octeon-static/pfe/obj-flowd-octeon-srx/flowd-octeon/
                                obj-octeon-static/pfe/obj-flowd-octeon-srx/flowd-octeon-hm/
flowd jsr                       obj-i386/pfe/obj-flowd2/flowd2/flowd
flowd SPC3                      obj/wrl7srx/amd64/pfe/obj-flowd-spc3/flowd_spc3.elf

NSD RE 1K3K                     obj-powerpc-usp/usp/usr.sbin/nsd/nsd
NSD RE branch                   obj-octeon-usp/usp/usr.sbin/nsd/nsd
NSD RE 5K                       obj-i386-usp/usp/usr.sbin/nsd/nsd
chasd RE 5K                     obj-i386/junos/usr.sbin/chasd

ioc2                            obj-ppce500/pfe/obj-ioc2

SANDBOXS:
---------
daily build sandbox             /homes/slt-builder/sandboxes/

linux daily build               /homes/ssd-builder/ngsrx-yocto-daily/
linux release                   /homes/ssd-builder/ngsrx-yocto-daily/ARCHIVE/
linux srxpfe                    obj-x86-srx-mr/BUILD/srxpfe-1.0-1/srxpfe

JDEBUG:
-------
/volume/fsgtools/bin/jdebug
-p srx-ffp | srx-700e | srx-mr ./localhost.srxpfe.3516.1463780517.core.tgz
-l /homes/ssd-builder/ngsrx-yocto-daily/DEV_X_151_X49_BRANCH/2016-05-18.0/srx-ffp/sandbox/Linux-Sandbox/DEV_X_151_X49_BRANCH/

Use below if /var/tmp/ storage is inefficient.
jdebug-tvp-big-tmp-storage 

GDB and sysroot:
----------------
/volume/publish/dev/wrlinux/v6/linux-tvp/wrl-2015-05-31/sysroots/x86_64-wrlinuxsdk-linux/usr/bin/x86_64-wrs-linux/x86_64-wrs-linux-gdb /homes/ssd-builder/ngsrx-yocto-daily/JUNOS_151_X49_D60_BRANCH/production/LATEST/srx-700e/sandbox/Linux-Sandbox/JUNOS_151_X49_D60_BRANCH/obj-x86-srx-700e/BUILD/srxpfe-1.0-1/srxpfe localhost.srxpfe.17000.1499687891.core
set sysroot:
/homes/ssd-builder/ngsrx-yocto-kernel/JUNOS_181_R3_BRANCH/production/2018-08-21.1/wrl6/srx_x86_64/build-srx-700e/x86-64/bitbake_build/tmp/sysroots/intel-x86-64/

gdb /homes/ssd-builder/ngsrx-yocto-daily/JUNOS_151_X49_D110_BRANCH/BUILD/srx-700e/sandbox/Linux-Sandbox/JUNOS_151_X49_D110_BRANCH/obj-x86-srx-700e/BUILD/srxpfe-1.0-1/srxp
fe localhost.bcmLINK.0.4156.1526482204.core

Directory with depth > 9:
-------------------------
./pfe/usp/rt/applications/voip/sip/stack/sip/core

KSYNCD JDEBUG:
--------------
/volume/labtools/kernel/tools/ksyncdebugger/ksyncdebugger.sh -k ksyncd.core "
    echo "$alldirs"
}

# grep multi log files in chronological order
function greplog() {

    if [[ $# -ne 2 ]] ; then
        echo "Usage: greplog <logfile> <regex>"
        return
    fi

    logfiles="$1*"
    shift 1
	find . -maxdepth 1 -name "$logfiles" | sort -r | xargs grep --color=auto "$@"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
